# An ISO 8601-encoded datetime
scalar ISO8601DateTime

type Ingredient {
  id: Int!
  ingredientGroup: IngredientGroup
  name: String!
  number: Int
  unitOfMeasurement: String
}

type IngredientGroup {
  id: Int!
  ingredients: [Ingredient!]
  name: String
}

type Label {
  id: Int!
  name: String!
}

type Mutation {
  recipeCreate(input: RecipeCreateInput!): RecipeCreatePayload
}

type Query {
  # A recipe
  recipe(id: ID!): Recipe

  # Categories of recipes.
  recipeCategories: [RecipeCategory!]

  # A list of recipes
  recipes: [Recipe!]

  # Search for different record types
  search(acceptTypes: [String!]!, queryString: String!): [Searchable!]
}

type Recipe {
  calories: Int
  cookTime: Int
  createdAt: ISO8601DateTime!
  datePublished: ISO8601DateTime!
  description: String
  id: ID!
  images: [String!]
  ingredientGroups: [IngredientGroup!]
  ingredients: [Ingredient!]
  instructions: [RecipeInstruction!]
  labels: [Label!]
  numberOfServings: Int
  prepTime: Int
  recipeCategory: String
  title: String!
  totalTime: Int
  updatedAt: ISO8601DateTime!
  user: User!
}

type RecipeCategory {
  id: Int!
  labels: [Label!]
  name: String!
}

# Autogenerated input type of RecipeCreate
input RecipeCreateInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  recipe: RecipeInput!
}

# Autogenerated return type of RecipeCreate
type RecipeCreatePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  errors: [String!]!
  recipe: Recipe
}

input RecipeIngredientInput {
  id: Int
  name: String!
  number: Float
  unitOfMeasurement: String
}

input RecipeInput {
  calories: Int!
  cookTime: Int
  description: String
  id: Int
  images: [String!]
  ingredients: [RecipeIngredientInput!]
  instructions: [RecipeInstructionInput!]
  labels: [RecipeLabelInput!]
  numberOfServings: Int
  prepTime: Int
  title: String!
  totalTime: Int
}

type RecipeInstruction {
  body: String!
  id: Int!
  step: Int!
}

input RecipeInstructionInput {
  body: String
  id: Int
}

input RecipeLabelInput {
  id: Int
  name: String!
}

# Objects which may be searched on
union Searchable = Recipe

type User {
  firstName: String!
  lastName: String!
  name: String!
}